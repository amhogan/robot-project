<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8" />
  <title>Robot Dashboard</title>
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <style>
    :root { color-scheme: dark; }
    body { font-family: system-ui, -apple-system, Segoe UI, Roboto, Ubuntu, Arial; margin:0; padding:16px; background:#0d1117; color:#e6edf3; }
    header { display:flex; justify-content:space-between; align-items:center; margin-bottom:12px; }
    h1 { font-size:20px; margin:0; }
    .grid { display:grid; grid-template-columns: 1fr 340px; gap:16px; }
    .card { background:#161b22; border:1px solid #30363d; border-radius:12px; padding:12px; }
    .row { display:flex; gap:8px; align-items:center; flex-wrap:wrap; }
    label { font-size:13px; opacity:.9; margin-right:6px; }
    select, button { background:#0d1117; color:#e6edf3; border:1px solid #30363d; border-radius:8px; padding:6px 8px; }
    img.stream { width:100%; height:auto; border-radius:10px; border:1px solid #30363d; background:#000; }
    .kv { display:grid; grid-template-columns: 1fr auto; gap:6px; font-size:14px; }
    .muted { opacity:.8; }
    code { background:#0b0f14; border:1px solid #30363d; padding:1px 4px; border-radius:4px; }
    .empty { padding:8px; border:1px dashed #30363d; border-radius:8px; margin-top:8px; font-size:14px; }
  </style>
</head>
<body>
  <header>
    <h1>Robot Dashboard</h1>
    <div class="row">
      <label for="topic">Topic:</label>
      <select id="topic">
        <option value="/image_raw">/image_raw</option>
        <option value="/camera/image_raw">/camera/image_raw</option>
      </select>
      <button id="reload">Reload Stream</button>
    </div>
  </header>

  <div class="grid">
    <div class="card">
      <img id="stream" class="stream" alt="Video stream (MJPEG)" />
      <div class="muted" style="margin-top:6px;">
        Via <code id="viaUrl">/wvs/stream?topic=/image_raw</code> (proxied to <code>web-video-server:8080</code>)
      </div>
      <div id="noTopics" class="empty" style="display:none;">
        No ROS image topics discovered. Start one, for example:
        <div><code>ros2 run image_tools cam2image --ros-args -r image:=/image_raw</code></div>
      </div>
    </div>

    <div class="card">
      <div class="row" style="justify-content:space-between; margin-bottom:8px;">
        <strong>System Metrics</strong>
        <span id="lastUpdated" class="muted">N/A</span>
      </div>
      <div class="kv">
        <div>CPU Temp</div>        <div id="cpuTemp" class="muted">N/A</div>
        <div>Uptime</div>          <div id="uptime" class="muted">N/A</div>
        <div>CPU %</div>           <div id="cpuPercent" class="muted">N/A</div>
        <div>Load Avg</div>        <div id="loadAvg" class="muted">N/A</div>
        <div>Memory Used</div>     <div id="memUsed" class="muted">N/A</div>
        <div>Disk Used</div>       <div id="diskUsed" class="muted">N/A</div>
      </div>
      <div class="muted" style="margin-top:8px;">From <code>/status</code> and <code>/status_temp</code> (proxied to <code>netstatus:5000</code>)</div>
    </div>
  </div>

<script>
(function() {
  const $  = sel => document.querySelector(sel);

  const topicSel = $('#topic');
  const streamImg = $('#stream');
  const viaLabel = $('#viaUrl');
  const noTopics = $('#noTopics');

  function fmtPct(x){ return (x!=null && !isNaN(x)) ? (Number(x).toFixed(1)+'%') : 'N/A'; }
  function fmtBytes(x){
    if (x==null) return 'N/A';
    const u=['B','KB','MB','GB','TB']; let i=0, n=+x;
    while(n>=1024 && i<u.length-1){ n/=1024; i++; }
    return `${n.toFixed(1)} ${u[i]}`;
  }
  function fmtUptime(sec){
    if (sec==null) return 'N/A';
    const s=Math.floor(sec); const days=Math.floor(s/86400);
    const h=Math.floor((s%86400)/3600), m=Math.floor((s%3600)/60);
    const parts=[]; if(days) parts.push(days+'d'); if(h) parts.push(h+'h'); if(m) parts.push(m+'m');
    return parts.length? parts.join(' ') : s+'s';
  }

  function setStream() {
    const t = topicSel.value || '/image_raw';
    const enc = encodeURIComponent(t);
    streamImg.src = `/wvs/stream?topic=${enc}&_=${Date.now().toString(36)}`;
    if (viaLabel) viaLabel.textContent = `/wvs/stream?topic=${t}`;
  }
  $('#reload').addEventListener('click', setStream);
  topicSel.addEventListener('change', setStream);

  async function refreshTopics() {
    try {
      const r = await fetch('/wvs/streams', {cache:'no-store'});
      if (!r.ok) throw new Error('streams http '+r.status);
      const html = await r.text();
      const doc = new DOMParser().parseFromString(html, 'text/html');
      const links = Array.from(doc.querySelectorAll('a[href*="/stream?topic="]'));
      const set = new Set();
      for (const a of links) {
        const u = new URL(a.getAttribute('href'), location.href);
        const t = u.searchParams.get('topic');
        if (t) set.add(t);
      }
      const topics = Array.from(set);
      noTopics.style.display = topics.length ? 'none' : 'block';

      if (topics.length) {
        const prev = topicSel.value;
        topicSel.innerHTML = '';
        for (const t of topics) {
          const opt = document.createElement('option');
          opt.value = t; opt.textContent = t;
          topicSel.appendChild(opt);
        }
        if (topics.includes(prev)) topicSel.value = prev;
        if (!topicSel.value) topicSel.value = topics[0];
        setStream();
      }
    } catch(e) {
      // leave defaults if WVS not ready
      console.warn('refreshTopics failed:', e);
    }
  }

  const el = {
    last: $('#lastUpdated'),
    cpuTemp: $('#cpuTemp'),
    uptime: $('#uptime'),
    cpuPercent: $('#cpuPercent'),
    loadAvg: $('#loadAvg'),
    memUsed: $('#memUsed'),
    diskUsed: $('#diskUsed')
  };

  async function fetchJson(url) {
    const r = await fetch(url, {cache: 'no-store'});
    if (!r.ok) throw new Error(url+' -> '+r.status);
    return r.json();
  }

  async function updateMetrics() {
    try {
      const [st, temp] = await Promise.all([
        fetchJson('/status').catch(()=>null),
        fetchJson('/status_temp').catch(()=>null)
      ]);
      if (el.last) el.last.textContent = new Date().toLocaleTimeString();

      el.cpuTemp.textContent =
        temp && temp.cpu_temp_c!=null ? Number(temp.cpu_temp_c).toFixed(1)+' °C' :
        temp && temp.cpu_temp_f!=null ? Number(temp.cpu_temp_f).toFixed(1)+' °F' :
        st && st.temp_c!=null         ? Number(st.temp_c).toFixed(1)+' °C' :
        'N/A';

      el.uptime.textContent =
        st && st.uptime_seconds!=null ? fmtUptime(st.uptime_seconds) :
        st && st.uptime!=null         ? st.uptime : 'N/A';

      const cpu = (st && (st.cpu_percent??st.cpu)) ?? null;
      el.cpuPercent.textContent = fmtPct(cpu);

      if (st && st.cpu && Array.isArray(st.cpu.load_avg)) {
        el.loadAvg.textContent = st.cpu.load_avg.map(x => (x.toFixed ? x.toFixed(2) : x)).join(' ');
      } else if (st && Array.isArray(st.loadavg)) {
        el.loadAvg.textContent = st.loadavg.map(x => (x.toFixed ? x.toFixed(2) : x)).join(' ');
      } else if (st && st.load1!=null) {
        const a=[st.load1, st.load5??null, st.load15??null].filter(v=>v!=null).map(x => (x.toFixed ? x.toFixed(2) : x));
        el.loadAvg.textContent = a.join(' ');
      } else {
        el.loadAvg.textContent = 'N/A';
      }

      if (st && (st.memory || st.mem)) {
        const m = st.memory ?? st.mem;
        const used = m.used_bytes ?? m.used ?? null;
        const total = m.total_bytes ?? m.total ?? null;
        el.memUsed.textContent = (used!=null && total!=null) ? (fmtBytes(used)+' / '+fmtBytes(total)) : 'N/A';
      } else { el.memUsed.textContent = 'N/A'; }

      if (st && st.disk) {
        const d = st.disk;
        const used = d.used_bytes ?? d.used ?? null;
        const total = d.total_bytes ?? d.total ?? null;
        el.diskUsed.textContent = (used!=null && total!=null) ? (fmtBytes(used)+' / '+fmtBytes(total)) : 'N/A';
      } else { el.diskUsed.textContent = 'N/A'; }
    } catch (e) {
      if (el.last) el.last.textContent = 'error';
      console.error('metrics update failed', e);
    }
  }

  // Init
  setStream();
  refreshTopics();
  setInterval(refreshTopics, 10000);
  setInterval(updateMetrics, 3000);
  updateMetrics();
})();
</script>
</body>
</html>
