<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>Robot Dashboard</title>
  <style>
    :root{
      --bg:#0b0f14; --panel:#111823; --muted:#8aa0b5; --text:#e6eef6; --accent:#4cc38a; --warn:#f59e0b; --bad:#ef4444;
      --card:#0f1520; --br:14px;
    }
    *{box-sizing:border-box}
    html,body{height:100%}
    body{
      margin:0; font:14px/1.45 system-ui,-apple-system,Segoe UI,Roboto,Inter,Arial,sans-serif;
      background:linear-gradient(180deg, #0b0f14, #0a0e13 50%, #090d12);
      color:var(--text);
    }
    header{
      padding:16px 18px; position:sticky; top:0; z-index:2;
      background:rgba(10,14,19,.7); backdrop-filter: blur(8px); border-bottom:1px solid #1c2633;
      display:flex; align-items:center; gap:12px; flex-wrap:wrap
    }
    .dot{width:10px;height:10px;border-radius:50%;display:inline-block;vertical-align:middle}
    .ok{background:var(--accent)} .bad{background:var(--bad)} .unknown{background:#6b7280}
    .subtle{color:var(--muted)}
    .wrap{max-width:1200px;margin:0 auto;padding:18px}
    .grid{
      display:grid; gap:16px;
      grid-template-columns: 1.1fr .9fr;
    }
    @media (max-width: 980px){ .grid{ grid-template-columns: 1fr; } }
    .card{
      background:radial-gradient(1200px 600px at 10% -10%, #0f1723 0%, #0d141d 40%, #0c121a 100%);
      border:1px solid #172130; border-radius:var(--br); overflow:hidden;
      box-shadow:0 10px 30px rgba(0,0,0,.25);
    }
    .card h2{
      margin:0; padding:12px 14px; font-size:15px; letter-spacing:.3px;
      border-bottom:1px solid #15202d; background:#0e1520; color:#cfe6ff
    }
    .pad{padding:12px 14px}
    .controls{
      display:flex; gap:10px; align-items:flex-end; flex-wrap:wrap
    }
    label{display:block;font-size:12px;color:var(--muted);margin-bottom:6px}
    input[type=text],select,input[type=number]{
      appearance:none; background:#0b121b; color:var(--text);
      border:1px solid #1a2432; border-radius:10px; padding:8px 10px; min-width:140px;
      outline:none; transition:border .15s ease
    }
    input[type=text]:focus,select:focus,input[type=number]:focus{ border-color:#29405a }
    button{
      border:1px solid #20445e; background:linear-gradient(#123145,#0f2a3a); color:#cfe6ff; 
      padding:9px 14px; border-radius:12px; cursor:pointer; font-weight:600;
      box-shadow: inset 0 1px 0 rgba(255,255,255,.06), 0 1px 0 rgba(0,0,0,.4);
    }
    button:hover{filter:brightness(1.05)}
    .streamBox{
      background:#0a1017; border-radius:12px; border:1px solid #152233; overflow:hidden; position:relative;
    }
    .streamBox .meta{
      position:absolute; right:10px; bottom:10px; background:rgba(0,0,0,.45);
      padding:6px 8px; border-radius:8px; font-size:12px; color:#d9e5f2; border:1px solid rgba(255,255,255,.07)
    }
    .stream{display:block; width:100%; height:auto; background: #0b1117;}
    .kv{display:grid;grid-template-columns:1fr auto; gap:6px 10px; align-items:center}
    .kv .k{color:#a9bed3}
    .kv .v{font-variant-numeric:tabular-nums}
    .pill{display:inline-flex;align-items:center;gap:6px;padding:6px 10px;border:1px solid #1f2b3a;border-radius:999px;background:#0e1520}
    .muted{opacity:.85}
    .row{display:flex;gap:10px;flex-wrap:wrap}
    .jsonlink a{color:#9bd0ff;text-decoration:none}
    .jsonlink a:hover{text-decoration:underline}
    footer{padding:16px;color:#6b7f97;text-align:center}
    code.small{font-size:12px;background:#0b121a;border:1px solid #172130;padding:2px 6px;border-radius:6px}
  </style>
</head>
<body>
  <header>
    <strong style="font-size:16px;letter-spacing:.4px">Robot Dashboard</strong>
    <span id="hlDot" class="dot unknown" title="Netstatus health"></span>
    <span id="hlText" class="subtle">checking…</span>
    <span class="subtle">•</span>
    <span class="pill"><span id="tempNow">–.–°C</span></span>
    <span class="subtle">• Uptime:</span> <span id="uptimeNow" class="subtle">–</span>
  </header>

  <div class="wrap">
    <div class="grid">
      <!-- Left: video -->
      <section class="card">
        <h2>Video</h2>
        <div class="pad">
          <div class="controls">
            <div>
              <label for="topic">Topic</label>
              <input id="topic" type="text" value="/image_raw" />
            </div>
            <div>
              <label for="quality">Quality (1–100)</label>
              <input id="quality" type="number" min="1" max="100" step="1" value="80" />
            </div>
            <div>
              <button id="applyBtn" type="button">Apply</button>
            </div>
            <div class="jsonlink">
              <label>Stream URL</label>
              <div><code class="small" id="streamUrl">/stream?topic=%2Fimage_raw&type=mjpeg&quality=80</code></div>
            </div>
          </div>
        </div>
        <div class="pad">
          <div class="streamBox">
            <img id="mjpeg" class="stream" src="/stream?topic=/image_raw<img id="mjpeg" class="stream" alt="MJPEG stream" />type=mjpeg<img id="mjpeg" class="stream" alt="MJPEG stream" />quality=80" alt="MJPEG stream" />
            <div class="meta" id="metaText">/image_raw • q80</div>
          </div>
        </div>
      </section>

      <!-- Right: telemetry -->
      <aside class="card">
        <h2>Telemetry</h2>
        <div class="pad">
          <div class="row" style="margin-bottom:10px">
            <span class="pill muted">Load: <span id="loadNow" style="margin-left:6px">– / – / –</span></span>
            <span class="pill muted">CPU: <span id="cpuNow" style="margin-left:6px">–%</span></span>
            <span class="pill muted">Mem: <span id="memNow" style="margin-left:6px">–%</span></span>
          </div>

          <div class="kv" style="margin-top:6px">
            <div class="k">Disk used</div><div class="v" id="diskNow">–%</div>
            <div class="k">Net sent/recv</div><div class="v" id="netNow">– / –</div>
            <div class="k">Temp</div><div class="v" id="tempNow2">–.– °C</div>
            <div class="k">Uptime</div><div class="v" id="uptimeNow2">–</div>
          </div>

          <div class="row" style="margin-top:12px">
            <div class="jsonlink">Raw: <a href="/api/netstatus/status" target="_blank" rel="noopener">status</a></div>
            <div class="jsonlink">• <a href="/api/netstatus/metrics.json" target="_blank" rel="noopener">metrics.json</a></div>
            <div class="jsonlink">• <a href="/api/netstatus/healthz" target="_blank" rel="noopener">healthz</a></div>
          </div>

          <div class="subtle" style="margin-top:10px">Updated <span id="updatedAt">never</span></div>
        </div>
      </aside>
    </div>
  </div>

  <footer>Proxy: <code class="small">/stream ? web-video-server:8080</code> • <code class="small">/api/netstatus ? netstatus:5000</code></footer>

  <script>
    const els = {
      img: document.getElementById('mjpeg'),
      topic: document.getElementById('topic'),
      q: document.getElementById('quality'),
      apply: document.getElementById('applyBtn'),
      url: document.getElementById('streamUrl'),
      meta: document.getElementById('metaText'),
      // telemetry
      dot: document.getElementById('hlDot'),
      hl: document.getElementById('hlText'),
      temp1: document.getElementById('tempNow'),
      temp2: document.getElementById('tempNow2'),
      uptime1: document.getElementById('uptimeNow'),
      uptime2: document.getElementById('uptimeNow2'),
      load: document.getElementById('loadNow'),
      cpu: document.getElementById('cpuNow'),
      mem: document.getElementById('memNow'),
      disk: document.getElementById('diskNow'),
      net: document.getElementById('netNow'),
      updated: document.getElementById('updatedAt'),
    };

    const endpoints = {
      health: '/api/netstatus/healthz',
      status: '/api/netstatus/status',
      metrics: '/api/netstatus/metrics.json'
    };

    function buildStreamUrl(topic, q){
      const t = encodeURIComponent(topic.trim() || '/image_raw');
      const qq = Math.max(1, Math.min(100, Number(q)||80));
      return `/stream?topic=${t}&type=mjpeg&quality=${qq}`;
    }

    function humanBytes(n){
      if(n == null) return '–';
      const u=['B','KB','MB','GB','TB']; let i=0, v=Number(n);
      while(v>=1024 && i<u.length-1){ v/=1024; i++; }
      return `${v.toFixed(v>=10?0:1)} ${u[i]}`;
    }
    function humanUptime(sec){
      if(sec == null) return '–';
      sec = Math.floor(sec);
      const d = Math.floor(sec/86400); sec%=86400;
      const h = Math.floor(sec/3600); sec%=3600;
      const m = Math.floor(sec/60); const s = sec%60;
      return (d?d+'d ':'') + (h?String(h).padStart(2,'0')+'h ':'') + String(m).padStart(2,'0')+'m '+String(s).padStart(2,'0')+'s';
    }

    function setHealth(state){
      els.dot.className = 'dot ' + (state==='ok'?'ok':state==='bad'?'bad':'unknown');
      els.hl.textContent = (state==='ok'?'online':state==='bad'?'error':'unknown');
    }

    async function fetchJSON(url, timeoutMs=3000){
      const ctl = new AbortController();
      const t = setTimeout(()=>ctl.abort(), timeoutMs);
      try{
        const r = await fetch(url, {signal: ctl.signal, cache: 'no-store'});
        clearTimeout(t);
        if(!r.ok) throw new Error(r.status+' '+r.statusText);
        return await r.json();
      }catch(e){
        clearTimeout(t);
        throw e;
      }
    }

    async function poll(){
      // health
      try{
        const h = await fetchJSON(endpoints.health, 2000);
        setHealth(h && h.status==='ok' ? 'ok' : 'bad');
      }catch{ setHealth('bad'); }

      // metrics
      try{
        const m = await fetchJSON(endpoints.metrics, 3000);
        if(m){
          const load = m.load_avg || {};
          els.load.textContent = `${Number(load['1m']||0).toFixed(2)} / ${Number(load['5m']||0).toFixed(2)} / ${Number(load['15m']||0).toFixed(2)}`;
          els.cpu.textContent  = `${Number(m.cpu_percent||0).toFixed(0)}%`;
          const mem = m.mem || {};
          els.mem.textContent  = `${Number(mem.percent||0).toFixed(0)}%`;
          const disk = m.disk || {};
          els.disk.textContent = `${Number(disk.percent||0).toFixed(0)}% (${humanBytes(disk.used)}/${humanBytes(disk.total)})`;
          const net = m.net_io || {};
          els.net.textContent  = `${humanBytes(net.bytes_sent)} / ${humanBytes(net.bytes_recv)}`;
          const tc = m.temp_c ?? (m.temp ?? null);
          const up = m.uptime_seconds ?? null;
          els.temp1.textContent = (tc!=null ? tc.toFixed(1)+'°C' : '–.–°C');
          els.temp2.textContent = (tc!=null ? tc.toFixed(1)+' °C' : '–');
          els.uptime1.textContent = humanUptime(up);
          els.uptime2.textContent = humanUptime(up);
          els.updated.textContent = new Date().toLocaleTimeString();
        }
      }catch(e){
        // keep old values, mark header unknown if health failed too
        if(els.dot.classList.contains('ok')===false) setHealth('unknown');
      }
    }

    function applyStream(){
      const url = buildStreamUrl(els.topic.value, els.q.value);
      els.img.src = url;
      els.url.textContent = url;
      els.meta.textContent = `${els.topic.value.trim()||'/image_raw'} • q${Math.max(1, Math.min(100, Number(els.q.value)||80))}`;
    }

    // Init
    document.addEventListener('DOMContentLoaded', ()=>{
      // Pre-fill from URL hash (?topic= & quality=), optional
      try{
        const u = new URL(window.location.href);
        const t = u.searchParams.get('topic'); if(t) els.topic.value = t;
        const q = u.searchParams.get('quality'); if(q) els.q.value = q;
      }catch{}
      els.apply.addEventListener('click', applyStream);
      applyStream();
      poll();
      setInterval(poll, 5000);
    });
  </script>
</body>
</html>
<script>
document.addEventListener('DOMContentLoaded', () => {
  const img   = document.getElementById('mjpeg');
  const topic = document.querySelector('#video-topic, #topic, [name="topic"]');
  const qual  = document.querySelector('#video-quality, #quality, [name="quality"]');
  const apply = document.querySelector('#apply-video, #apply');
  const urlEl = document.getElementById('stream-url');

  function buildUrl() {
    const t = topic && topic.value ? topic.value : '/image_raw';
    const q = qual && qual.value ? qual.value : '80';
    return `/stream?topic=${encodeURIComponent(t)}&type=mjpeg&quality=${encodeURIComponent(q)}`;
  }
  function setStream() {
    const u = buildUrl();
    if (img)   img.src = u;
    if (urlEl) urlEl.textContent = u;  // purely informational
  }

  setStream();
  if (apply) apply.addEventListener('click', (e) => { e.preventDefault?.(); setStream(); });
});
</script>
