# docker-compose.yml
# Robot Project - Core stack (ASCII only)
# Network: robot-net

services:
  netstatus:
    image: python:3.11-slim
    container_name: robot-netstatus-1
    working_dir: /app
    command: bash -lc "python -m pip install -q --no-cache-dir flask psutil && python app.py"
    volumes:
      - ../services/netstatus:/app:ro
    expose:
      - "5000"
    healthcheck:
      test: ["CMD", "python", "-c", "import urllib.request; urllib.request.urlopen('http://127.0.0.1:5000/status', timeout=2).read()"]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 10s
    restart: unless-stopped
    networks:
      robot-net:
        aliases: [netstatus]

  ros-core:
    image: ros:iron-ros-core
    container_name: ros-core
    environment: [ "ROS_DOMAIN_ID=0" ]
    command: ["bash","-lc","source /opt/ros/iron/setup.bash && sleep infinity"]
    restart: unless-stopped
    networks:
      robot-net:
        aliases: [ros-core]

  web-video-server:
    image: ros:iron-ros-base
    container_name: robot-web-video-server-1
    environment: [ "ROS_DOMAIN_ID=0" ]
    ports: ["8080:8080"]
    command: >
      bash -lc "apt-get update &&
              DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends ros-iron-web-video-server &&
              rm -rf /var/lib/apt/lists/* &&
              . /opt/ros/iron/setup.bash &&
              ros2 run web_video_server web_video_server --port 8080 --address 0.0.0.0"
    depends_on: [ros-core]
    restart: unless-stopped
    networks:
      robot-net:
        aliases: [web-video-server]

  usb-cam:
    image: ros:iron-ros-base
    container_name: robot-usb-cam-1
    environment:
      - ROS_DOMAIN_ID=0
      - VIDEO_DEVICE=/dev/video0   # change to /dev/video1 if needed
    devices:
      - "/dev/video0:/dev/video0"  # keep in sync with VIDEO_DEVICE
    command: >
      bash -lc ". /opt/ros/iron/setup.bash &&
              apt-get update &&
              DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends ros-iron-v4l2-camera v4l-utils &&
              rm -rf /var/lib/apt/lists/* &&
              ros2 run v4l2_camera v4l2_camera_node --ros-args
                -p video_device:=${VIDEO_DEVICE}
                -p output_encoding:=jpeg
                -p image_size:=[640,480]"
    depends_on: [ros-core]
    restart: unless-stopped
    networks:
      robot-net:
        aliases: [usb-cam]

  video-dashboard:
    image: nginx:stable
    container_name: robot-video-dashboard-1
    volumes:
      - ../site:/usr/share/nginx/html:ro
      - ../site/nginx/conf.d:/etc/nginx/conf.d:ro
    ports: ["8081:80"]
    depends_on: [web-video-server, netstatus]
    restart: unless-stopped
    networks:
      robot-net:
        aliases: [video-dashboard]

networks:
  robot-net:
    name: robot-net
    driver: bridge
