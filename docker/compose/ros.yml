name: robot

services:
  ros-core:
    image: ros:iron-ros-core
    restart: unless-stopped
    networks: [robot-net]
    command: ["bash","-lc","source /opt/ros/iron/setup.bash && sleep infinity"]
    environment:
      - ROS_DOMAIN_ID=0

  web-video-server:
    build:
      context: ${PROJECT_ROOT}
      dockerfile: docker/wvs.Dockerfile
    restart: unless-stopped
    networks: [robot-net]
    ports: ["${WVS_PORT:-8080}:8080"]
    depends_on:
      ros-core:
        condition: service_started
    environment:
      - ROS_DOMAIN_ID=0
    healthcheck:
      # Succeeds as soon as something is listening on :8080 (no reliance on /streams)
      test: ["CMD-SHELL", "bash -lc 'exec 3<>/dev/tcp/127.0.0.1/8080'"]
      interval: 10s
      timeout: 3s
      retries: 10
      start_period: 10s
  v4l2-camera:
    image: ros:iron-ros-base
    container_name: v4l2-camera
    networks: [robot-net]
    restart: unless-stopped
    depends_on:
      ros-core:
        condition: service_started
    environment:
      - CAM_DEV=${CAM_DEV}
    group_add:
      - "video"
    devices:
      - "${CAM_DEV}:${CAM_DEV}"
    device_cgroup_rules:
      - "c 81:* rwm"
    command:
      - bash
      - -lc
      - >
        set -euo pipefail;
        apt-get update &&
        apt-get install -y ros-iron-v4l2-camera ros-iron-image-transport ros-iron-image-transport-plugins &&
        rm -rf /var/lib/apt/lists/*;
        source /opt/ros/iron/setup.bash &&
        exec ros2 run v4l2_camera v4l2_camera_node
          --ros-args
          -p video_device:=${CAM_DEV}
          -p image_size:=[640,480]
          -p frame_rate:=15.0
          -p pixel_format:=MJPG
          -p output_encoding:=rgb8
          -r image:=/image_raw

  # Test image publisher so we always have a stream
  image-test:
    build:
      context: ${PROJECT_ROOT}
      dockerfile: docker/camtest.Dockerfile
    restart: unless-stopped
    networks: [robot-net]
    depends_on:
      ros-core:
        condition: service_started

networks:
  robot-net: {}
