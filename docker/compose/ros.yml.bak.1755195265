name: robot

services:
  ros-core:
    image: ros:iron-ros-core
    restart: unless-stopped
    networks: [robot-net]
    command: ["bash","-lc","source /opt/ros/iron/setup.bash && sleep infinity"]
    environment:
      - ROS_DOMAIN_ID=0

  web-video-server:
    build:
      context: ${PROJECT_ROOT}
      dockerfile: docker/wvs.Dockerfile
    restart: unless-stopped
    networks: [robot-net]
    ports: ["${WVS_PORT:-8080}:8080"]
    depends_on:
      ros-core:
        condition: service_started
    environment:
      - ROS_DOMAIN_ID=0
    healthcheck:
      # Succeeds as soon as something is listening on :8080 (no reliance on /streams)
      test: ["CMD-SHELL", "bash -lc 'exec 3<>/dev/tcp/127.0.0.1/8080'"]
      interval: 10s
      timeout: 3s
      retries: 10
      start_period: 10s

    usb-camera:
    build:
      context: ${PROJECT_ROOT}
      dockerfile: docker/Dockerfile.usb-camera
    image: robot-usb-camera
    container_name: usb-camera
    restart: unless-stopped
    networks: [robot-net]
    depends_on:
      ros-core:
        condition: service_started
    devices:
      - "${CAM_DEV}:${CAM_DEV}"
    group_add: ["video"]
    environment:
      - ROS_DOMAIN_ID=0
      - CAM_DEV=${CAM_DEV}

  command: >
  bash -lc "
    set -eo pipefail;  # no '-u'
    apt-get update &&
    apt-get install -y --no-install-recommends ros-iron-usb-cam ros-iron-image-transport-plugins &&
    rm -rf /var/lib/apt/lists/*;
    source /opt/ros/iron/setup.bash && exec
    ros2 run usb_cam usb_cam_node_exe --ros-args
      -p video_device:=${CAM_DEV}
      -p framerate:=15
      -p image_width:=640
      -p image_height:=480
      -p pixel_format:=mjpeg
      -p io_method:=mmap
  "

networks:
  robot-net: {}
